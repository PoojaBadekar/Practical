#1
pragma solidity ^0.6;
contract Student_management
{
    struct Student 
    {
        int stud_id;
        string name;
        string department;
    }
    Student[] Students;

    function add_stud(int stud_id, string memory name, string memory department) public
    {
        Student memory stud = Student(stud_id,name,department);
        Students.push(stud);
    }

    function getStudent(int stud_id) public view returns(string memory, string memory)
    {
        for (uint i=0; i<Students.length; i++)
        {
            Student memory stud = Students[i];
            if(stud.stud_id==stud_id)
            {
                return(stud.name,stud.department);
            }
        }
        return("Not Found", "Not Found");
    }
}

        
#Bank_BT
pragma solidity ^0.6;
contract bank{
    mapping(address =>uint) public user_account;
    mapping(address=>bool)public user_exists;
    function create_account()public payable returns(string memory){
        require(user_exists[msg.sender]==false,"Account already created");
        if(msg.value==0){
            user_account[msg.sender] = 0;
            user_exists[msg.sender] = true;
            return "Account created";
        }
        require(user_exists[msg.sender]==false,"Account already created");
        user_account[msg.sender] = 0;
        user_exists[msg.sender] = true;
        return "Account created";
    }
    function deposit(uint amount) public payable returns(string memory){
        require(user_exists[msg.sender]==true,"Account not created");
        require(amount >0,"amount should be more then zero");
        user_account[msg.sender] = user_account[msg.sender]+amount;
        return "deposited succefully";
    }
    function withdraw(uint amount) public payable returns(string memory){
        require(user_account[msg.sender]>amount,"Insufficient amount");
        require(user_exists[msg.sender]==true,"Account not created");
        require(amount>0,"Amount should be greater than zero");
        user_account[msg.sender] = user_account[msg.sender]-amount;
        return "withdraw successfully";
    }
     function transfer(address payable userAddress , uint amount) public returns (string memory)
    {
        require( user_account[msg.sender]>amount , "Insufficient Balance");
        require( user_exists[msg.sender]==true , "Account not created");
        require( user_exists[userAddress]==true , "Transfer account not created");
        require( amount>0 , "Amount should be greater than zero");
        user_account[msg.sender] = user_account[msg.sender] - amount;
        user_account[userAddress] = user_account[userAddress] + amount;
        return "Transfer Successfully";
    }
    function user_balance()public view returns(uint){
        return user_account[msg.sender];
    }
    function account_exist()public view returns(bool){
        return user_exists[msg.sender];
    }

}